// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestTask1.Data;

#nullable disable

namespace TestTask1.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlatOwner", b =>
                {
                    b.Property<int>("FlatsID")
                        .HasColumnType("integer");

                    b.Property<int>("OwnersID")
                        .HasColumnType("integer");

                    b.HasKey("FlatsID", "OwnersID");

                    b.HasIndex("OwnersID");

                    b.ToTable("FlatOwner");
                });

            modelBuilder.Entity("TestTask1.Models.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("TestTask1.Models.Flat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("FlatName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HouseID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("HouseID");

                    b.ToTable("Flat", (string)null);
                });

            modelBuilder.Entity("TestTask1.Models.House", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("HouseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StreetID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("StreetID");

                    b.ToTable("House", (string)null);
                });

            modelBuilder.Entity("TestTask1.Models.Owner", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Owner", (string)null);
                });

            modelBuilder.Entity("TestTask1.Models.Street", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("CityID")
                        .HasColumnType("integer");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Street", (string)null);
                });

            modelBuilder.Entity("FlatOwner", b =>
                {
                    b.HasOne("TestTask1.Models.Flat", null)
                        .WithMany()
                        .HasForeignKey("FlatsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTask1.Models.Owner", null)
                        .WithMany()
                        .HasForeignKey("OwnersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestTask1.Models.Flat", b =>
                {
                    b.HasOne("TestTask1.Models.House", "House")
                        .WithMany("Flats")
                        .HasForeignKey("HouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");
                });

            modelBuilder.Entity("TestTask1.Models.House", b =>
                {
                    b.HasOne("TestTask1.Models.Street", "Street")
                        .WithMany("Houses")
                        .HasForeignKey("StreetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Street");
                });

            modelBuilder.Entity("TestTask1.Models.Street", b =>
                {
                    b.HasOne("TestTask1.Models.City", "City")
                        .WithMany("Streets")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("TestTask1.Models.City", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("TestTask1.Models.House", b =>
                {
                    b.Navigation("Flats");
                });

            modelBuilder.Entity("TestTask1.Models.Street", b =>
                {
                    b.Navigation("Houses");
                });
#pragma warning restore 612, 618
        }
    }
}
